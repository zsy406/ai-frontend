syntax = "proto3";

option csharp_namespace = "OrderManagementService";

package order;

// The Order service definition.
service OrderService {
    rpc CreateOrderAsync(CreateOrderRequest) returns (OrderResponse);
    rpc GetOrderAsync(GetOrderRequest) returns (OrderResponse);
    rpc GetOrdersByUserIdAsync(GetOrderRequest) returns (OrderResponse);
    rpc GetOrdersByStatusAsync(GetOrderRequest) returns (OrderResponse);
    rpc UpdateOrdersAsync(CreateOrderRequest) returns (OrderResponse);
    rpc DeleteOrderAsync(GetOrderRequest) returns (OrderResponse);
}

// The request message for creating an order.
message CreateOrderRequest {
    int32 orderId = 1;
    int32 userId = 2;
    repeated OrderItem orderItems = 3;
    OrderStatus status = 4;
    string orderDate = 9;
    string deliveryDate = 5;
    string paymentMethod = 6;
    string shippingAddress = 7;
    string billingAddress = 8;
    double totalAmount = 10;
}

// The request message for retrieving an order.
message GetOrderRequest {
    int32 orderId = 1;
    int32 userId = 2;
    OrderStatus status = 3;
}
message OrderResponse {
    Order order =1;
    repeated Order orders = 2;
    bool success = 3;
}

// The response message containing order details.
message Order {
    int32 orderId = 1;
    int32 userId = 2;
    repeated OrderItem orderItems = 3;
    OrderStatus status = 4;
        string orderDate = 9;
    string deliveryDate = 5;
    string paymentMethod = 6;
    string shippingAddress = 7;
    string billingAddress = 8;
    double totalAmount = 10;

}
// The status of the order.
enum OrderStatus {
    PENDING = 0;
    COMPLETED = 1;
    CANCELLED = 2;
}
// The response message containing order item details.
message OrderItem{
    int32 orderId = 1;
    int32 productId = 2;
    int32 quantity = 3;
    string productName = 4;
    double price = 5;
    double subAmount = 6;
}
//abc